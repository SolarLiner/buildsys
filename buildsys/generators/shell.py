import shlex
from pathlib import Path

from buildsys import __version__
from buildsys.generators import BaseGenerator
from buildsys.project import Project, ProjectType


class ShellGenerator(BaseGenerator):
    def generate_project(self, project: Project):
        super().generate_project(project)
        script_path = self.build_dir / "build.sh"
        output_file = self.build_dir / project.name.replace(" ", "_")
        if project.type == ProjectType.StaticLibrary:
            output_file = output_file.with_suffix(".a")
        elif project.type == ProjectType.SharedLibrary:
            output_file = output_file.with_suffix(".so")

        lines = [
            s.strip()
            for s in f"""#!/usr/bin/env bash
        # Generated by buildsys, version {__version__}
        # If using version control, please ignore this file as it is generated automatically.

        set -e
        _oldpwd=$PWD
        cd "$(dirname "$0")" 
        """.splitlines()
        ]
        objs = list()
        for src in project.sources:
            obj, cmd = self.generate_object(project, src)
            if not obj.parent.exists():
                obj.parent.mkdir(parents=True)
            objs.append(obj)
            lines.append(shlex.join([str(c) for c in cmd]))
        lines.append(
            shlex.join([str(s) for s in self.compiler.link(objs, output_file, [])])
        )
        lines.append('cd "$_oldpwd"')
        with script_path.open("w") as f:
            f.writelines([line + "\n" for line in lines])

    def generate_object(self, project: Project, source: Path):
        obj_dir_relative = source.parent.relative_to(self.source_dir)
        object_path = (
            (self.build_dir / obj_dir_relative / source.stem)
            .with_suffix(".o")
            .resolve()
        )
        return object_path, self.compiler.compile(source, object_path, [])
